import streamlit as st
import plotly.express as px
from utils.preprocessing import load_data, filter_data

st.set_page_config(page_title="üìå Variables Clave", layout="wide")
st.title("üìå Selecci√≥n y An√°lisis de Variables Clave")

# Cargar datos
df = load_data()

# Sidebar inputs
category_col = next((col for col in ["Category", "Product line"] if col in df.columns), None)
categorias = df[category_col].unique() if category_col else []
branches = df["Branch"].unique() if "Branch" in df.columns else []

start_date = st.sidebar.date_input("üìÖ Fecha inicio", df["Date"].min())
end_date = st.sidebar.date_input("üìÖ Fecha fin", df["Date"].max())
selected_categories = st.sidebar.multiselect("üè∑Ô∏è Categor√≠as", categorias, default=categorias)
selected_branches = st.sidebar.multiselect("üè¨ Sucursales", branches, default=branches)

filtered_df = filter_data(df, start_date, end_date, selected_categories, category_col, selected_branches)

# KPIs principales
st.markdown("## üìà Indicadores Clave del Segmento Actual")
col1, col2, col3 = st.columns(3)
col1.metric("üßæ Transacciones", len(filtered_df))
col2.metric("üí∞ Ventas Totales", f"${filtered_df['Total'].sum():,.2f}")
col3.metric("üßÆ Promedio por Venta", f"${filtered_df['Total'].mean():,.2f}")

# Tabs para exploraci√≥n
tabs = st.tabs(["üëÅ Vista Previa", "üìä Estad√≠sticas", "üìã An√°lisis Visual", "üß† Justificaci√≥n"])

# Tab 1 - Vista previa
with tabs[0]:
    st.subheader("üëÅ Primeros registros filtrados")
    df_display = filtered_df.copy()
    if "Date" in df_display.columns:
        df_display["Date"] = df_display["Date"].astype(str)
    st.dataframe(df_display.head())

# Tab 2 - Estad√≠sticas
with tabs[1]:
    st.subheader("üìä Resumen estad√≠stico de variables num√©ricas")
    stats = filtered_df.select_dtypes(include='number').describe()
    st.dataframe(stats)

# Tab 3 - An√°lisis Visual
with tabs[2]:
    st.subheader("üìã Visualizaci√≥n r√°pida de variables clave")

    if "Date" in filtered_df.columns and "Total" in filtered_df.columns:
        st.markdown("#### üìÜ Evoluci√≥n Temporal de Ventas")
        df_time = filtered_df.groupby("Date")["Total"].sum().reset_index()
        fig_time = px.line(df_time, x="Date", y="Total", title="Ventas Totales a lo Largo del Tiempo")
        st.plotly_chart(fig_time, use_container_width=True)

    if "Branch" in filtered_df.columns:
        st.markdown("#### üè™ Ventas por Sucursal")
        fig_branch = px.bar(filtered_df.groupby("Branch")["Total"].sum().reset_index(), 
                            x="Branch", y="Total", title="Total de Ventas por Sucursal")
        st.plotly_chart(fig_branch, use_container_width=True)

    if category_col:
        st.markdown("#### üß∫ Participaci√≥n por Categor√≠a")
        fig_cat = px.pie(filtered_df, names=category_col, values="Total", title="Distribuci√≥n por Categor√≠a")
        st.plotly_chart(fig_cat, use_container_width=True)

# Tab 4 - Justificaci√≥n
with tabs[3]:
    st.subheader("üß† Justificaci√≥n de variables clave")
    st.markdown(f"""
Las siguientes variables han sido seleccionadas como clave en este an√°lisis:

- **Total**: Representa el monto total por transacci√≥n, fundamental para evaluar ingresos.
- **Quantity**: Cantidad de productos por venta, √∫til para entender volumen de consumo.
- **Date**: Permite evaluar patrones temporales y estacionalidad.
- **Branch**: Compara desempe√±o entre tiendas.
- **Gender**: Permite entender el perfil demogr√°fico de clientes.
- **{category_col or 'otra variable'}**: Da contexto sobre el tipo de producto o servicio adquirido.

> Estas variables son cr√≠ticas para entender el rendimiento de ventas, ajustar campa√±as de marketing, optimizar stock, e incluso redise√±ar el layout de tienda o cat√°logo.
""")
